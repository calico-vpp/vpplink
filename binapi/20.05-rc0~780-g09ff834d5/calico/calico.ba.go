// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /Users/nskrzypc/wrk/vpp/build-root/install-vpp-native/vpp/share/vpp/api/plugins/calico.api.json

/*
Package calico is a generated VPP binary API for 'calico' module.

It consists of:
	 14 enums
	  6 aliases
	  7 types
	  1 union
	 18 messages
	  9 services
*/
package calico

import (
	"bytes"
	"context"
	"io"
	"strconv"

	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "calico"
	// APIVersion is the API version of this module.
	APIVersion = "1.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x2a2f0b7a
)

// AddressFamily represents VPP binary API enum 'address_family'.
type AddressFamily uint8

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

var AddressFamily_name = map[uint8]string{
	0: "ADDRESS_IP4",
	1: "ADDRESS_IP6",
}

var AddressFamily_value = map[string]uint8{
	"ADDRESS_IP4": 0,
	"ADDRESS_IP6": 1,
}

func (x AddressFamily) String() string {
	s, ok := AddressFamily_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// CalicoEncapType represents VPP binary API enum 'calico_encap_type'.
type CalicoEncapType uint32

const (
	CALICO_API_ENCAP_TYPE_NAT4 CalicoEncapType = 0
	CALICO_API_ENCAP_TYPE_NAT6 CalicoEncapType = 1
	CALICO_API_ENCAP_N_TYPES   CalicoEncapType = 2
)

var CalicoEncapType_name = map[uint32]string{
	0: "CALICO_API_ENCAP_TYPE_NAT4",
	1: "CALICO_API_ENCAP_TYPE_NAT6",
	2: "CALICO_API_ENCAP_N_TYPES",
}

var CalicoEncapType_value = map[string]uint32{
	"CALICO_API_ENCAP_TYPE_NAT4": 0,
	"CALICO_API_ENCAP_TYPE_NAT6": 1,
	"CALICO_API_ENCAP_N_TYPES":   2,
}

func (x CalicoEncapType) String() string {
	s, ok := CalicoEncapType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// CalicoLkpTypeT represents VPP binary API enum 'calico_lkp_type_t'.
type CalicoLkpTypeT uint32

const (
	CALICO_API_LKP_SAME_IP_PORT CalicoLkpTypeT = 0
	CALICO_API_LKP_DIFF_IP_PORT CalicoLkpTypeT = 1
	CALICO_API_LKP_ALL_PORT_IP  CalicoLkpTypeT = 2
	CALICO_API_LKP_N_TYPES      CalicoLkpTypeT = 3
)

var CalicoLkpTypeT_name = map[uint32]string{
	0: "CALICO_API_LKP_SAME_IP_PORT",
	1: "CALICO_API_LKP_DIFF_IP_PORT",
	2: "CALICO_API_LKP_ALL_PORT_IP",
	3: "CALICO_API_LKP_N_TYPES",
}

var CalicoLkpTypeT_value = map[string]uint32{
	"CALICO_API_LKP_SAME_IP_PORT": 0,
	"CALICO_API_LKP_DIFF_IP_PORT": 1,
	"CALICO_API_LKP_ALL_PORT_IP":  2,
	"CALICO_API_LKP_N_TYPES":      3,
}

func (x CalicoLkpTypeT) String() string {
	s, ok := CalicoLkpTypeT_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// CalicoNatProtocol represents VPP binary API enum 'calico_nat_protocol'.
type CalicoNatProtocol uint32

const (
	CALICO_API_NAT_PROTOCOL_UDP CalicoNatProtocol = 6
	CALICO_API_NAT_PROTOCOL_TCP CalicoNatProtocol = 23
	CALICO_API_NAT_PROTOCOL_ANY CalicoNatProtocol = 4.294967295e+09
)

var CalicoNatProtocol_name = map[uint32]string{
	6:               "CALICO_API_NAT_PROTOCOL_UDP",
	23:              "CALICO_API_NAT_PROTOCOL_TCP",
	4.294967295e+09: "CALICO_API_NAT_PROTOCOL_ANY",
}

var CalicoNatProtocol_value = map[string]uint32{
	"CALICO_API_NAT_PROTOCOL_UDP": 6,
	"CALICO_API_NAT_PROTOCOL_TCP": 23,
	"CALICO_API_NAT_PROTOCOL_ANY": 4.294967295e+09,
}

func (x CalicoNatProtocol) String() string {
	s, ok := CalicoNatProtocol_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// CalicoVipType represents VPP binary API enum 'calico_vip_type'.
type CalicoVipType uint32

const (
	CALICO_API_VIP_TYPE_IP4_NAT4 CalicoVipType = 0
	CALICO_API_VIP_TYPE_IP6_NAT6 CalicoVipType = 1
	CALICO_API_VIP_N_TYPES       CalicoVipType = 2
)

var CalicoVipType_name = map[uint32]string{
	0: "CALICO_API_VIP_TYPE_IP4_NAT4",
	1: "CALICO_API_VIP_TYPE_IP6_NAT6",
	2: "CALICO_API_VIP_N_TYPES",
}

var CalicoVipType_value = map[string]uint32{
	"CALICO_API_VIP_TYPE_IP4_NAT4": 0,
	"CALICO_API_VIP_TYPE_IP6_NAT6": 1,
	"CALICO_API_VIP_N_TYPES":       2,
}

func (x CalicoVipType) String() string {
	s, ok := CalicoVipType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfStatusFlags represents VPP binary API enum 'if_status_flags'.
type IfStatusFlags uint32

const (
	IF_STATUS_API_FLAG_ADMIN_UP IfStatusFlags = 1
	IF_STATUS_API_FLAG_LINK_UP  IfStatusFlags = 2
)

var IfStatusFlags_name = map[uint32]string{
	1: "IF_STATUS_API_FLAG_ADMIN_UP",
	2: "IF_STATUS_API_FLAG_LINK_UP",
}

var IfStatusFlags_value = map[string]uint32{
	"IF_STATUS_API_FLAG_ADMIN_UP": 1,
	"IF_STATUS_API_FLAG_LINK_UP":  2,
}

func (x IfStatusFlags) String() string {
	s, ok := IfStatusFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfType represents VPP binary API enum 'if_type'.
type IfType uint32

const (
	IF_API_TYPE_HARDWARE IfType = 0
	IF_API_TYPE_SUB      IfType = 1
	IF_API_TYPE_P2P      IfType = 2
	IF_API_TYPE_PIPE     IfType = 3
)

var IfType_name = map[uint32]string{
	0: "IF_API_TYPE_HARDWARE",
	1: "IF_API_TYPE_SUB",
	2: "IF_API_TYPE_P2P",
	3: "IF_API_TYPE_PIPE",
}

var IfType_value = map[string]uint32{
	"IF_API_TYPE_HARDWARE": 0,
	"IF_API_TYPE_SUB":      1,
	"IF_API_TYPE_P2P":      2,
	"IF_API_TYPE_PIPE":     3,
}

func (x IfType) String() string {
	s, ok := IfType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPDscp represents VPP binary API enum 'ip_dscp'.
type IPDscp uint8

const (
	IP_API_DSCP_CS0  IPDscp = 0
	IP_API_DSCP_CS1  IPDscp = 8
	IP_API_DSCP_AF11 IPDscp = 10
	IP_API_DSCP_AF12 IPDscp = 12
	IP_API_DSCP_AF13 IPDscp = 14
	IP_API_DSCP_CS2  IPDscp = 16
	IP_API_DSCP_AF21 IPDscp = 18
	IP_API_DSCP_AF22 IPDscp = 20
	IP_API_DSCP_AF23 IPDscp = 22
	IP_API_DSCP_CS3  IPDscp = 24
	IP_API_DSCP_AF31 IPDscp = 26
	IP_API_DSCP_AF32 IPDscp = 28
	IP_API_DSCP_AF33 IPDscp = 30
	IP_API_DSCP_CS4  IPDscp = 32
	IP_API_DSCP_AF41 IPDscp = 34
	IP_API_DSCP_AF42 IPDscp = 36
	IP_API_DSCP_AF43 IPDscp = 38
	IP_API_DSCP_CS5  IPDscp = 40
	IP_API_DSCP_EF   IPDscp = 46
	IP_API_DSCP_CS6  IPDscp = 48
	IP_API_DSCP_CS7  IPDscp = 50
)

var IPDscp_name = map[uint8]string{
	0:  "IP_API_DSCP_CS0",
	8:  "IP_API_DSCP_CS1",
	10: "IP_API_DSCP_AF11",
	12: "IP_API_DSCP_AF12",
	14: "IP_API_DSCP_AF13",
	16: "IP_API_DSCP_CS2",
	18: "IP_API_DSCP_AF21",
	20: "IP_API_DSCP_AF22",
	22: "IP_API_DSCP_AF23",
	24: "IP_API_DSCP_CS3",
	26: "IP_API_DSCP_AF31",
	28: "IP_API_DSCP_AF32",
	30: "IP_API_DSCP_AF33",
	32: "IP_API_DSCP_CS4",
	34: "IP_API_DSCP_AF41",
	36: "IP_API_DSCP_AF42",
	38: "IP_API_DSCP_AF43",
	40: "IP_API_DSCP_CS5",
	46: "IP_API_DSCP_EF",
	48: "IP_API_DSCP_CS6",
	50: "IP_API_DSCP_CS7",
}

var IPDscp_value = map[string]uint8{
	"IP_API_DSCP_CS0":  0,
	"IP_API_DSCP_CS1":  8,
	"IP_API_DSCP_AF11": 10,
	"IP_API_DSCP_AF12": 12,
	"IP_API_DSCP_AF13": 14,
	"IP_API_DSCP_CS2":  16,
	"IP_API_DSCP_AF21": 18,
	"IP_API_DSCP_AF22": 20,
	"IP_API_DSCP_AF23": 22,
	"IP_API_DSCP_CS3":  24,
	"IP_API_DSCP_AF31": 26,
	"IP_API_DSCP_AF32": 28,
	"IP_API_DSCP_AF33": 30,
	"IP_API_DSCP_CS4":  32,
	"IP_API_DSCP_AF41": 34,
	"IP_API_DSCP_AF42": 36,
	"IP_API_DSCP_AF43": 38,
	"IP_API_DSCP_CS5":  40,
	"IP_API_DSCP_EF":   46,
	"IP_API_DSCP_CS6":  48,
	"IP_API_DSCP_CS7":  50,
}

func (x IPDscp) String() string {
	s, ok := IPDscp_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPEcn represents VPP binary API enum 'ip_ecn'.
type IPEcn uint8

const (
	IP_API_ECN_NONE IPEcn = 0
	IP_API_ECN_ECT0 IPEcn = 1
	IP_API_ECN_ECT1 IPEcn = 2
	IP_API_ECN_CE   IPEcn = 3
)

var IPEcn_name = map[uint8]string{
	0: "IP_API_ECN_NONE",
	1: "IP_API_ECN_ECT0",
	2: "IP_API_ECN_ECT1",
	3: "IP_API_ECN_CE",
}

var IPEcn_value = map[string]uint8{
	"IP_API_ECN_NONE": 0,
	"IP_API_ECN_ECT0": 1,
	"IP_API_ECN_ECT1": 2,
	"IP_API_ECN_CE":   3,
}

func (x IPEcn) String() string {
	s, ok := IPEcn_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPProto represents VPP binary API enum 'ip_proto'.
type IPProto uint8

const (
	IP_API_PROTO_HOPOPT   IPProto = 0
	IP_API_PROTO_ICMP     IPProto = 1
	IP_API_PROTO_IGMP     IPProto = 2
	IP_API_PROTO_TCP      IPProto = 6
	IP_API_PROTO_UDP      IPProto = 17
	IP_API_PROTO_GRE      IPProto = 47
	IP_API_PROTO_ESP      IPProto = 50
	IP_API_PROTO_AH       IPProto = 51
	IP_API_PROTO_ICMP6    IPProto = 58
	IP_API_PROTO_EIGRP    IPProto = 88
	IP_API_PROTO_OSPF     IPProto = 89
	IP_API_PROTO_SCTP     IPProto = 132
	IP_API_PROTO_RESERVED IPProto = 255
)

var IPProto_name = map[uint8]string{
	0:   "IP_API_PROTO_HOPOPT",
	1:   "IP_API_PROTO_ICMP",
	2:   "IP_API_PROTO_IGMP",
	6:   "IP_API_PROTO_TCP",
	17:  "IP_API_PROTO_UDP",
	47:  "IP_API_PROTO_GRE",
	50:  "IP_API_PROTO_ESP",
	51:  "IP_API_PROTO_AH",
	58:  "IP_API_PROTO_ICMP6",
	88:  "IP_API_PROTO_EIGRP",
	89:  "IP_API_PROTO_OSPF",
	132: "IP_API_PROTO_SCTP",
	255: "IP_API_PROTO_RESERVED",
}

var IPProto_value = map[string]uint8{
	"IP_API_PROTO_HOPOPT":   0,
	"IP_API_PROTO_ICMP":     1,
	"IP_API_PROTO_IGMP":     2,
	"IP_API_PROTO_TCP":      6,
	"IP_API_PROTO_UDP":      17,
	"IP_API_PROTO_GRE":      47,
	"IP_API_PROTO_ESP":      50,
	"IP_API_PROTO_AH":       51,
	"IP_API_PROTO_ICMP6":    58,
	"IP_API_PROTO_EIGRP":    88,
	"IP_API_PROTO_OSPF":     89,
	"IP_API_PROTO_SCTP":     132,
	"IP_API_PROTO_RESERVED": 255,
}

func (x IPProto) String() string {
	s, ok := IPProto_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// LinkDuplex represents VPP binary API enum 'link_duplex'.
type LinkDuplex uint32

const (
	LINK_DUPLEX_API_UNKNOWN LinkDuplex = 0
	LINK_DUPLEX_API_HALF    LinkDuplex = 1
	LINK_DUPLEX_API_FULL    LinkDuplex = 2
)

var LinkDuplex_name = map[uint32]string{
	0: "LINK_DUPLEX_API_UNKNOWN",
	1: "LINK_DUPLEX_API_HALF",
	2: "LINK_DUPLEX_API_FULL",
}

var LinkDuplex_value = map[string]uint32{
	"LINK_DUPLEX_API_UNKNOWN": 0,
	"LINK_DUPLEX_API_HALF":    1,
	"LINK_DUPLEX_API_FULL":    2,
}

func (x LinkDuplex) String() string {
	s, ok := LinkDuplex_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// MtuProto represents VPP binary API enum 'mtu_proto'.
type MtuProto uint32

const (
	MTU_PROTO_API_L3   MtuProto = 0
	MTU_PROTO_API_IP4  MtuProto = 1
	MTU_PROTO_API_IP6  MtuProto = 2
	MTU_PROTO_API_MPLS MtuProto = 3
)

var MtuProto_name = map[uint32]string{
	0: "MTU_PROTO_API_L3",
	1: "MTU_PROTO_API_IP4",
	2: "MTU_PROTO_API_IP6",
	3: "MTU_PROTO_API_MPLS",
}

var MtuProto_value = map[string]uint32{
	"MTU_PROTO_API_L3":   0,
	"MTU_PROTO_API_IP4":  1,
	"MTU_PROTO_API_IP6":  2,
	"MTU_PROTO_API_MPLS": 3,
}

func (x MtuProto) String() string {
	s, ok := MtuProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// RxMode represents VPP binary API enum 'rx_mode'.
type RxMode uint32

const (
	RX_MODE_API_UNKNOWN   RxMode = 0
	RX_MODE_API_POLLING   RxMode = 1
	RX_MODE_API_INTERRUPT RxMode = 2
	RX_MODE_API_ADAPTIVE  RxMode = 3
	RX_MODE_API_DEFAULT   RxMode = 4
)

var RxMode_name = map[uint32]string{
	0: "RX_MODE_API_UNKNOWN",
	1: "RX_MODE_API_POLLING",
	2: "RX_MODE_API_INTERRUPT",
	3: "RX_MODE_API_ADAPTIVE",
	4: "RX_MODE_API_DEFAULT",
}

var RxMode_value = map[string]uint32{
	"RX_MODE_API_UNKNOWN":   0,
	"RX_MODE_API_POLLING":   1,
	"RX_MODE_API_INTERRUPT": 2,
	"RX_MODE_API_ADAPTIVE":  3,
	"RX_MODE_API_DEFAULT":   4,
}

func (x RxMode) String() string {
	s, ok := RxMode_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SubIfFlags represents VPP binary API enum 'sub_if_flags'.
type SubIfFlags uint32

const (
	SUB_IF_API_FLAG_NO_TAGS           SubIfFlags = 1
	SUB_IF_API_FLAG_ONE_TAG           SubIfFlags = 2
	SUB_IF_API_FLAG_TWO_TAGS          SubIfFlags = 4
	SUB_IF_API_FLAG_DOT1AD            SubIfFlags = 8
	SUB_IF_API_FLAG_EXACT_MATCH       SubIfFlags = 16
	SUB_IF_API_FLAG_DEFAULT           SubIfFlags = 32
	SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY SubIfFlags = 64
	SUB_IF_API_FLAG_INNER_VLAN_ID_ANY SubIfFlags = 128
	SUB_IF_API_FLAG_MASK_VNET         SubIfFlags = 254
	SUB_IF_API_FLAG_DOT1AH            SubIfFlags = 256
)

var SubIfFlags_name = map[uint32]string{
	1:   "SUB_IF_API_FLAG_NO_TAGS",
	2:   "SUB_IF_API_FLAG_ONE_TAG",
	4:   "SUB_IF_API_FLAG_TWO_TAGS",
	8:   "SUB_IF_API_FLAG_DOT1AD",
	16:  "SUB_IF_API_FLAG_EXACT_MATCH",
	32:  "SUB_IF_API_FLAG_DEFAULT",
	64:  "SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY",
	128: "SUB_IF_API_FLAG_INNER_VLAN_ID_ANY",
	254: "SUB_IF_API_FLAG_MASK_VNET",
	256: "SUB_IF_API_FLAG_DOT1AH",
}

var SubIfFlags_value = map[string]uint32{
	"SUB_IF_API_FLAG_NO_TAGS":           1,
	"SUB_IF_API_FLAG_ONE_TAG":           2,
	"SUB_IF_API_FLAG_TWO_TAGS":          4,
	"SUB_IF_API_FLAG_DOT1AD":            8,
	"SUB_IF_API_FLAG_EXACT_MATCH":       16,
	"SUB_IF_API_FLAG_DEFAULT":           32,
	"SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY": 64,
	"SUB_IF_API_FLAG_INNER_VLAN_ID_ANY": 128,
	"SUB_IF_API_FLAG_MASK_VNET":         254,
	"SUB_IF_API_FLAG_DOT1AH":            256,
}

func (x SubIfFlags) String() string {
	s, ok := SubIfFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// AddressWithPrefix represents VPP binary API alias 'address_with_prefix'.
type AddressWithPrefix Prefix

// InterfaceIndex represents VPP binary API alias 'interface_index'.
type InterfaceIndex uint32

// IP4Address represents VPP binary API alias 'ip4_address'.
type IP4Address [4]uint8

// IP4AddressWithPrefix represents VPP binary API alias 'ip4_address_with_prefix'.
type IP4AddressWithPrefix IP4Prefix

// IP6Address represents VPP binary API alias 'ip6_address'.
type IP6Address [16]uint8

// IP6AddressWithPrefix represents VPP binary API alias 'ip6_address_with_prefix'.
type IP6AddressWithPrefix IP6Prefix

// Address represents VPP binary API type 'address'.
type Address struct {
	Af AddressFamily
	Un AddressUnion
}

func (*Address) GetTypeName() string { return "address" }

// CalicoVip represents VPP binary API type 'calico_vip'.
type CalicoVip struct {
	Pfx      AddressWithPrefix
	Protocol IPProto
	Port     uint16
}

func (*CalicoVip) GetTypeName() string { return "calico_vip" }

// IP4Prefix represents VPP binary API type 'ip4_prefix'.
type IP4Prefix struct {
	Address IP4Address
	Len     uint8
}

func (*IP4Prefix) GetTypeName() string { return "ip4_prefix" }

// IP6Prefix represents VPP binary API type 'ip6_prefix'.
type IP6Prefix struct {
	Address IP6Address
	Len     uint8
}

func (*IP6Prefix) GetTypeName() string { return "ip6_prefix" }

// Mprefix represents VPP binary API type 'mprefix'.
type Mprefix struct {
	Af               AddressFamily
	GrpAddressLength uint16
	GrpAddress       AddressUnion
	SrcAddress       AddressUnion
}

func (*Mprefix) GetTypeName() string { return "mprefix" }

// Prefix represents VPP binary API type 'prefix'.
type Prefix struct {
	Address Address
	Len     uint8
}

func (*Prefix) GetTypeName() string { return "prefix" }

// PrefixMatcher represents VPP binary API type 'prefix_matcher'.
type PrefixMatcher struct {
	Le uint8
	Ge uint8
}

func (*PrefixMatcher) GetTypeName() string { return "prefix_matcher" }

// AddressUnion represents VPP binary API union 'address_union'.
type AddressUnion struct {
	XXX_UnionData [16]byte
}

func (*AddressUnion) GetTypeName() string { return "address_union" }

func AddressUnionIP4(a IP4Address) (u AddressUnion) {
	u.SetIP4(a)
	return
}
func (u *AddressUnion) SetIP4(a IP4Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func AddressUnionIP6(a IP6Address) (u AddressUnion) {
	u.SetIP6(a)
	return
}
func (u *AddressUnion) SetIP6(a IP6Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// CalicoAddDelAs represents VPP binary API message 'calico_add_del_as'.
type CalicoAddDelAs struct {
	Pfx       AddressWithPrefix
	Protocol  uint8
	Port      uint16
	AsAddress Address
	IsDel     bool
	IsFlush   bool
}

func (m *CalicoAddDelAs) Reset()                        { *m = CalicoAddDelAs{} }
func (*CalicoAddDelAs) GetMessageName() string          { return "calico_add_del_as" }
func (*CalicoAddDelAs) GetCrcString() string            { return "78628987" }
func (*CalicoAddDelAs) GetMessageType() api.MessageType { return api.RequestMessage }

// CalicoAddDelAsReply represents VPP binary API message 'calico_add_del_as_reply'.
type CalicoAddDelAsReply struct {
	Retval int32
}

func (m *CalicoAddDelAsReply) Reset()                        { *m = CalicoAddDelAsReply{} }
func (*CalicoAddDelAsReply) GetMessageName() string          { return "calico_add_del_as_reply" }
func (*CalicoAddDelAsReply) GetCrcString() string            { return "e8d4e804" }
func (*CalicoAddDelAsReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// CalicoAddDelIntfNat4 represents VPP binary API message 'calico_add_del_intf_nat4'.
type CalicoAddDelIntfNat4 struct {
	IsAdd     bool
	SwIfIndex InterfaceIndex
}

func (m *CalicoAddDelIntfNat4) Reset()                        { *m = CalicoAddDelIntfNat4{} }
func (*CalicoAddDelIntfNat4) GetMessageName() string          { return "calico_add_del_intf_nat4" }
func (*CalicoAddDelIntfNat4) GetCrcString() string            { return "47d6e753" }
func (*CalicoAddDelIntfNat4) GetMessageType() api.MessageType { return api.RequestMessage }

// CalicoAddDelIntfNat4Reply represents VPP binary API message 'calico_add_del_intf_nat4_reply'.
type CalicoAddDelIntfNat4Reply struct {
	Retval int32
}

func (m *CalicoAddDelIntfNat4Reply) Reset()                        { *m = CalicoAddDelIntfNat4Reply{} }
func (*CalicoAddDelIntfNat4Reply) GetMessageName() string          { return "calico_add_del_intf_nat4_reply" }
func (*CalicoAddDelIntfNat4Reply) GetCrcString() string            { return "e8d4e804" }
func (*CalicoAddDelIntfNat4Reply) GetMessageType() api.MessageType { return api.ReplyMessage }

// CalicoAddDelIntfNat6 represents VPP binary API message 'calico_add_del_intf_nat6'.
type CalicoAddDelIntfNat6 struct {
	IsAdd     bool
	SwIfIndex InterfaceIndex
}

func (m *CalicoAddDelIntfNat6) Reset()                        { *m = CalicoAddDelIntfNat6{} }
func (*CalicoAddDelIntfNat6) GetMessageName() string          { return "calico_add_del_intf_nat6" }
func (*CalicoAddDelIntfNat6) GetCrcString() string            { return "47d6e753" }
func (*CalicoAddDelIntfNat6) GetMessageType() api.MessageType { return api.RequestMessage }

// CalicoAddDelIntfNat6Reply represents VPP binary API message 'calico_add_del_intf_nat6_reply'.
type CalicoAddDelIntfNat6Reply struct {
	Retval int32
}

func (m *CalicoAddDelIntfNat6Reply) Reset()                        { *m = CalicoAddDelIntfNat6Reply{} }
func (*CalicoAddDelIntfNat6Reply) GetMessageName() string          { return "calico_add_del_intf_nat6_reply" }
func (*CalicoAddDelIntfNat6Reply) GetCrcString() string            { return "e8d4e804" }
func (*CalicoAddDelIntfNat6Reply) GetMessageType() api.MessageType { return api.ReplyMessage }

// CalicoAddDelSnatEntry represents VPP binary API message 'calico_add_del_snat_entry'.
type CalicoAddDelSnatEntry struct {
	Pfx     AddressWithPrefix
	Addr    Address
	TableID uint32
	IsAdd   bool
}

func (m *CalicoAddDelSnatEntry) Reset()                        { *m = CalicoAddDelSnatEntry{} }
func (*CalicoAddDelSnatEntry) GetMessageName() string          { return "calico_add_del_snat_entry" }
func (*CalicoAddDelSnatEntry) GetCrcString() string            { return "4b362c8c" }
func (*CalicoAddDelSnatEntry) GetMessageType() api.MessageType { return api.RequestMessage }

// CalicoAddDelSnatEntryReply represents VPP binary API message 'calico_add_del_snat_entry_reply'.
type CalicoAddDelSnatEntryReply struct {
	Retval int32
}

func (m *CalicoAddDelSnatEntryReply) Reset()                        { *m = CalicoAddDelSnatEntryReply{} }
func (*CalicoAddDelSnatEntryReply) GetMessageName() string          { return "calico_add_del_snat_entry_reply" }
func (*CalicoAddDelSnatEntryReply) GetCrcString() string            { return "e8d4e804" }
func (*CalicoAddDelSnatEntryReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// CalicoAddDelVip represents VPP binary API message 'calico_add_del_vip'.
type CalicoAddDelVip struct {
	Pfx                 AddressWithPrefix
	Protocol            uint8
	Port                uint16
	Encap               CalicoEncapType
	TargetPort          uint16
	NewFlowsTableLength uint32
	IsDel               bool
}

func (m *CalicoAddDelVip) Reset()                        { *m = CalicoAddDelVip{} }
func (*CalicoAddDelVip) GetMessageName() string          { return "calico_add_del_vip" }
func (*CalicoAddDelVip) GetCrcString() string            { return "75d934d8" }
func (*CalicoAddDelVip) GetMessageType() api.MessageType { return api.RequestMessage }

// CalicoAddDelVipReply represents VPP binary API message 'calico_add_del_vip_reply'.
type CalicoAddDelVipReply struct {
	Retval int32
}

func (m *CalicoAddDelVipReply) Reset()                        { *m = CalicoAddDelVipReply{} }
func (*CalicoAddDelVipReply) GetMessageName() string          { return "calico_add_del_vip_reply" }
func (*CalicoAddDelVipReply) GetCrcString() string            { return "e8d4e804" }
func (*CalicoAddDelVipReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// CalicoAsDetails represents VPP binary API message 'calico_as_details'.
type CalicoAsDetails struct {
	Vip        CalicoVip
	AppSrv     Address
	Flags      uint8
	InUseSince uint32
}

func (m *CalicoAsDetails) Reset()                        { *m = CalicoAsDetails{} }
func (*CalicoAsDetails) GetMessageName() string          { return "calico_as_details" }
func (*CalicoAsDetails) GetCrcString() string            { return "5127736f" }
func (*CalicoAsDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// CalicoAsDump represents VPP binary API message 'calico_as_dump'.
type CalicoAsDump struct {
	Pfx      AddressWithPrefix
	Protocol uint8
	Port     uint16
}

func (m *CalicoAsDump) Reset()                        { *m = CalicoAsDump{} }
func (*CalicoAsDump) GetMessageName() string          { return "calico_as_dump" }
func (*CalicoAsDump) GetCrcString() string            { return "1063f819" }
func (*CalicoAsDump) GetMessageType() api.MessageType { return api.RequestMessage }

// CalicoConf represents VPP binary API message 'calico_conf'.
type CalicoConf struct {
	StickyBucketsPerCore uint32
	FlowTimeout          uint32
}

func (m *CalicoConf) Reset()                        { *m = CalicoConf{} }
func (*CalicoConf) GetMessageName() string          { return "calico_conf" }
func (*CalicoConf) GetCrcString() string            { return "f8eac047" }
func (*CalicoConf) GetMessageType() api.MessageType { return api.RequestMessage }

// CalicoConfReply represents VPP binary API message 'calico_conf_reply'.
type CalicoConfReply struct {
	Retval int32
}

func (m *CalicoConfReply) Reset()                        { *m = CalicoConfReply{} }
func (*CalicoConfReply) GetMessageName() string          { return "calico_conf_reply" }
func (*CalicoConfReply) GetCrcString() string            { return "e8d4e804" }
func (*CalicoConfReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// CalicoFlushVip represents VPP binary API message 'calico_flush_vip'.
type CalicoFlushVip struct {
	Pfx      AddressWithPrefix
	Protocol uint8
	Port     uint16
}

func (m *CalicoFlushVip) Reset()                        { *m = CalicoFlushVip{} }
func (*CalicoFlushVip) GetMessageName() string          { return "calico_flush_vip" }
func (*CalicoFlushVip) GetCrcString() string            { return "1063f819" }
func (*CalicoFlushVip) GetMessageType() api.MessageType { return api.RequestMessage }

// CalicoFlushVipReply represents VPP binary API message 'calico_flush_vip_reply'.
type CalicoFlushVipReply struct {
	Retval int32
}

func (m *CalicoFlushVipReply) Reset()                        { *m = CalicoFlushVipReply{} }
func (*CalicoFlushVipReply) GetMessageName() string          { return "calico_flush_vip_reply" }
func (*CalicoFlushVipReply) GetCrcString() string            { return "e8d4e804" }
func (*CalicoFlushVipReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// CalicoVipDetails represents VPP binary API message 'calico_vip_details'.
type CalicoVipDetails struct {
	Vip             CalicoVip
	Encap           CalicoEncapType
	TargetPort      uint16
	FlowTableLength uint16
}

func (m *CalicoVipDetails) Reset()                        { *m = CalicoVipDetails{} }
func (*CalicoVipDetails) GetMessageName() string          { return "calico_vip_details" }
func (*CalicoVipDetails) GetCrcString() string            { return "38f38860" }
func (*CalicoVipDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// CalicoVipDump represents VPP binary API message 'calico_vip_dump'.
type CalicoVipDump struct {
	Pfx        AddressWithPrefix
	PfxMatcher PrefixMatcher
	Protocol   uint8
	Port       uint16
}

func (m *CalicoVipDump) Reset()                        { *m = CalicoVipDump{} }
func (*CalicoVipDump) GetMessageName() string          { return "calico_vip_dump" }
func (*CalicoVipDump) GetCrcString() string            { return "c7bcb124" }
func (*CalicoVipDump) GetMessageType() api.MessageType { return api.RequestMessage }

func init() {
	api.RegisterMessage((*CalicoAddDelAs)(nil), "calico.CalicoAddDelAs")
	api.RegisterMessage((*CalicoAddDelAsReply)(nil), "calico.CalicoAddDelAsReply")
	api.RegisterMessage((*CalicoAddDelIntfNat4)(nil), "calico.CalicoAddDelIntfNat4")
	api.RegisterMessage((*CalicoAddDelIntfNat4Reply)(nil), "calico.CalicoAddDelIntfNat4Reply")
	api.RegisterMessage((*CalicoAddDelIntfNat6)(nil), "calico.CalicoAddDelIntfNat6")
	api.RegisterMessage((*CalicoAddDelIntfNat6Reply)(nil), "calico.CalicoAddDelIntfNat6Reply")
	api.RegisterMessage((*CalicoAddDelSnatEntry)(nil), "calico.CalicoAddDelSnatEntry")
	api.RegisterMessage((*CalicoAddDelSnatEntryReply)(nil), "calico.CalicoAddDelSnatEntryReply")
	api.RegisterMessage((*CalicoAddDelVip)(nil), "calico.CalicoAddDelVip")
	api.RegisterMessage((*CalicoAddDelVipReply)(nil), "calico.CalicoAddDelVipReply")
	api.RegisterMessage((*CalicoAsDetails)(nil), "calico.CalicoAsDetails")
	api.RegisterMessage((*CalicoAsDump)(nil), "calico.CalicoAsDump")
	api.RegisterMessage((*CalicoConf)(nil), "calico.CalicoConf")
	api.RegisterMessage((*CalicoConfReply)(nil), "calico.CalicoConfReply")
	api.RegisterMessage((*CalicoFlushVip)(nil), "calico.CalicoFlushVip")
	api.RegisterMessage((*CalicoFlushVipReply)(nil), "calico.CalicoFlushVipReply")
	api.RegisterMessage((*CalicoVipDetails)(nil), "calico.CalicoVipDetails")
	api.RegisterMessage((*CalicoVipDump)(nil), "calico.CalicoVipDump")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*CalicoAddDelAs)(nil),
		(*CalicoAddDelAsReply)(nil),
		(*CalicoAddDelIntfNat4)(nil),
		(*CalicoAddDelIntfNat4Reply)(nil),
		(*CalicoAddDelIntfNat6)(nil),
		(*CalicoAddDelIntfNat6Reply)(nil),
		(*CalicoAddDelSnatEntry)(nil),
		(*CalicoAddDelSnatEntryReply)(nil),
		(*CalicoAddDelVip)(nil),
		(*CalicoAddDelVipReply)(nil),
		(*CalicoAsDetails)(nil),
		(*CalicoAsDump)(nil),
		(*CalicoConf)(nil),
		(*CalicoConfReply)(nil),
		(*CalicoFlushVip)(nil),
		(*CalicoFlushVipReply)(nil),
		(*CalicoVipDetails)(nil),
		(*CalicoVipDump)(nil),
	}
}

// RPCService represents RPC service API for calico module.
type RPCService interface {
	DumpCalicoAs(ctx context.Context, in *CalicoAsDump) (RPCService_DumpCalicoAsClient, error)
	DumpCalicoVip(ctx context.Context, in *CalicoVipDump) (RPCService_DumpCalicoVipClient, error)
	CalicoAddDelAs(ctx context.Context, in *CalicoAddDelAs) (*CalicoAddDelAsReply, error)
	CalicoAddDelIntfNat4(ctx context.Context, in *CalicoAddDelIntfNat4) (*CalicoAddDelIntfNat4Reply, error)
	CalicoAddDelIntfNat6(ctx context.Context, in *CalicoAddDelIntfNat6) (*CalicoAddDelIntfNat6Reply, error)
	CalicoAddDelSnatEntry(ctx context.Context, in *CalicoAddDelSnatEntry) (*CalicoAddDelSnatEntryReply, error)
	CalicoAddDelVip(ctx context.Context, in *CalicoAddDelVip) (*CalicoAddDelVipReply, error)
	CalicoConf(ctx context.Context, in *CalicoConf) (*CalicoConfReply, error)
	CalicoFlushVip(ctx context.Context, in *CalicoFlushVip) (*CalicoFlushVipReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpCalicoAs(ctx context.Context, in *CalicoAsDump) (RPCService_DumpCalicoAsClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpCalicoAsClient{stream}
	return x, nil
}

type RPCService_DumpCalicoAsClient interface {
	Recv() (*CalicoAsDetails, error)
}

type serviceClient_DumpCalicoAsClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpCalicoAsClient) Recv() (*CalicoAsDetails, error) {
	m := new(CalicoAsDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpCalicoVip(ctx context.Context, in *CalicoVipDump) (RPCService_DumpCalicoVipClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpCalicoVipClient{stream}
	return x, nil
}

type RPCService_DumpCalicoVipClient interface {
	Recv() (*CalicoVipDetails, error)
}

type serviceClient_DumpCalicoVipClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpCalicoVipClient) Recv() (*CalicoVipDetails, error) {
	m := new(CalicoVipDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) CalicoAddDelAs(ctx context.Context, in *CalicoAddDelAs) (*CalicoAddDelAsReply, error) {
	out := new(CalicoAddDelAsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CalicoAddDelIntfNat4(ctx context.Context, in *CalicoAddDelIntfNat4) (*CalicoAddDelIntfNat4Reply, error) {
	out := new(CalicoAddDelIntfNat4Reply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CalicoAddDelIntfNat6(ctx context.Context, in *CalicoAddDelIntfNat6) (*CalicoAddDelIntfNat6Reply, error) {
	out := new(CalicoAddDelIntfNat6Reply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CalicoAddDelSnatEntry(ctx context.Context, in *CalicoAddDelSnatEntry) (*CalicoAddDelSnatEntryReply, error) {
	out := new(CalicoAddDelSnatEntryReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CalicoAddDelVip(ctx context.Context, in *CalicoAddDelVip) (*CalicoAddDelVipReply, error) {
	out := new(CalicoAddDelVipReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CalicoConf(ctx context.Context, in *CalicoConf) (*CalicoConfReply, error) {
	out := new(CalicoConfReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CalicoFlushVip(ctx context.Context, in *CalicoFlushVip) (*CalicoFlushVipReply, error) {
	out := new(CalicoFlushVipReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
