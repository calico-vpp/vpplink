// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /Users/aloaugus/src/vpp-api-repo/20.05-rc0~540_g77ea42b~b9261/api/plugins/tunnel.api.json

/*
Package tunnel is a generated VPP binary API for 'tunnel' module.

It consists of:
	  4 messages
	  2 services
*/
package tunnel

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "tunnel"
	// APIVersion is the API version of this module.
	APIVersion = "1.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x97f1b65d
)

// QuicTunnelAddDel represents VPP binary API message 'quic_tunnel_add_del'.
type QuicTunnelAddDel struct {
	IsAdd      uint8
	IsIP4      uint8
	DstAddress []byte `struc:"[16]byte"`
	DstPort    uint16
	IsEncap    uint8
}

func (m *QuicTunnelAddDel) Reset()                        { *m = QuicTunnelAddDel{} }
func (*QuicTunnelAddDel) GetMessageName() string          { return "quic_tunnel_add_del" }
func (*QuicTunnelAddDel) GetCrcString() string            { return "57f69d89" }
func (*QuicTunnelAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// QuicTunnelAddDelReply represents VPP binary API message 'quic_tunnel_add_del_reply'.
type QuicTunnelAddDelReply struct {
	Retval    int32
	SwIfIndex uint32
}

func (m *QuicTunnelAddDelReply) Reset()                        { *m = QuicTunnelAddDelReply{} }
func (*QuicTunnelAddDelReply) GetMessageName() string          { return "quic_tunnel_add_del_reply" }
func (*QuicTunnelAddDelReply) GetCrcString() string            { return "fda5941f" }
func (*QuicTunnelAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// QuicTunnelListen represents VPP binary API message 'quic_tunnel_listen'.
type QuicTunnelListen struct {
	IsAdd   uint8
	IsIP4   uint8
	Address []byte `struc:"[16]byte"`
	Port    uint16
	IsEncap uint8
}

func (m *QuicTunnelListen) Reset()                        { *m = QuicTunnelListen{} }
func (*QuicTunnelListen) GetMessageName() string          { return "quic_tunnel_listen" }
func (*QuicTunnelListen) GetCrcString() string            { return "70d93268" }
func (*QuicTunnelListen) GetMessageType() api.MessageType { return api.RequestMessage }

// QuicTunnelListenReply represents VPP binary API message 'quic_tunnel_listen_reply'.
type QuicTunnelListenReply struct {
	Retval int32
}

func (m *QuicTunnelListenReply) Reset()                        { *m = QuicTunnelListenReply{} }
func (*QuicTunnelListenReply) GetMessageName() string          { return "quic_tunnel_listen_reply" }
func (*QuicTunnelListenReply) GetCrcString() string            { return "e8d4e804" }
func (*QuicTunnelListenReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*QuicTunnelAddDel)(nil), "tunnel.QuicTunnelAddDel")
	api.RegisterMessage((*QuicTunnelAddDelReply)(nil), "tunnel.QuicTunnelAddDelReply")
	api.RegisterMessage((*QuicTunnelListen)(nil), "tunnel.QuicTunnelListen")
	api.RegisterMessage((*QuicTunnelListenReply)(nil), "tunnel.QuicTunnelListenReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*QuicTunnelAddDel)(nil),
		(*QuicTunnelAddDelReply)(nil),
		(*QuicTunnelListen)(nil),
		(*QuicTunnelListenReply)(nil),
	}
}

// RPCService represents RPC service API for tunnel module.
type RPCService interface {
	QuicTunnelAddDel(ctx context.Context, in *QuicTunnelAddDel) (*QuicTunnelAddDelReply, error)
	QuicTunnelListen(ctx context.Context, in *QuicTunnelListen) (*QuicTunnelListenReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) QuicTunnelAddDel(ctx context.Context, in *QuicTunnelAddDel) (*QuicTunnelAddDelReply, error) {
	out := new(QuicTunnelAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QuicTunnelListen(ctx context.Context, in *QuicTunnelListen) (*QuicTunnelListenReply, error) {
	out := new(QuicTunnelListenReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
