{{ if .RequirementSatisfied "ip_types" ">= 3.0.0" "interface_types" ">= 1.0.0" "vxlan" ">= 2.1.0" }}// Code generated by vpplink DO NOT EDIT.
// Copyright (C) 2020 Cisco Systems Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package {{ .PackageName }}
import (
	"fmt"

	types "github.com/calico-vpp/vpplink/api/v0"
	"{{ .BinAPI }}/interface_types"
	"{{ .BinAPI }}/ip_types"
	"{{ .BinAPI }}/vxlan"
)

func (v *Vpp) ListVXLanTunnels() ([]types.VXLanTunnel, error) {
	client := vxlan.NewServiceClient(v.conn)

	stream, err := client.VxlanTunnelV2Dump(v.ctx, &vxlan.VxlanTunnelV2Dump{
		SwIfIndex: interface_types.InterfaceIndex(types.InvalidInterface),
	})
	if err != nil {
		return nil, fmt.Errorf("failed to list VXLan tunnels: %w", err)
	}
	var tunnels []types.VXLanTunnel
	for {
		response, err := stream.Recv()
		if err != nil {
			return nil, fmt.Errorf("failed to list VXLan tunnels: %w", err)
		}
		tunnels = append(tunnels, types.VXLanTunnel{
			SrcAddress:     response.SrcAddress.ToIP(),
			DstAddress:     response.DstAddress.ToIP(),
			SrcPort:        response.SrcPort,
			DstPort:        response.DstPort,
			Vni:            response.Vni,
			DecapNextIndex: response.DecapNextIndex,
			SwIfIndex:      uint32(response.SwIfIndex),
		})
	}
	return tunnels, nil
}

func (v *Vpp) addDelVXLanTunnel(tunnel *types.VXLanTunnel, isAdd bool) (swIfIndex uint32, err error) {
	client := vxlan.NewServiceClient(v.conn)

	response, err := client.VxlanAddDelTunnelV3(v.ctx, &vxlan.VxlanAddDelTunnelV3{
		IsAdd:          isAdd,
		Instance:       ^uint32(0),
		SrcAddress:     ip_types.AddressFromIP(tunnel.SrcAddress),
		DstAddress:     ip_types.AddressFromIP(tunnel.DstAddress),
		SrcPort:        tunnel.SrcPort,
		DstPort:        tunnel.DstPort,
		Vni:            tunnel.Vni,
		DecapNextIndex: tunnel.DecapNextIndex,
		IsL3:           true,
	})
	if err != nil {
		return 0, err
	}

	return uint32(response.SwIfIndex), nil
}

func (v *Vpp) AddVXLanTunnel(tunnel *types.VXLanTunnel) (swIfIndex uint32, err error) {
	swIfIndex, err = v.addDelVXLanTunnel(tunnel, true)
	if err != nil {
		return 0, fmt.Errorf("failed to add VXLan tunnel: %w", err)
	}
	return swIfIndex, nil
}

func (v *Vpp) DelVXLanTunnel(tunnel *types.VXLanTunnel) (err error) {
	_, err = v.addDelVXLanTunnel(tunnel, false)
	if err != nil {
		return fmt.Errorf("failed to delete VXLan tunnel: %w", err)
	}
	return nil
}

{{end}}
